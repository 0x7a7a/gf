// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package article

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table gf_article.
type Entity struct {
	Id         int         `orm:"id,primary"  json:"id"`          //
	CatId      int         `orm:"cat_id"      json:"cat_id"`      // 分类ID
	Uid        int         `orm:"uid"         json:"uid"`         // 用户ID
	Title      string      `orm:"title"       json:"title"`       // 标题
	Content    string      `orm:"content"     json:"content"`     // 内容
	Order      int         `orm:"order"       json:"order"`       // 排序
	Brief      string      `orm:"brief"       json:"brief"`       // 摘要
	Thumb      string      `orm:"thumb"       json:"thumb"`       // 缩略图
	Tags       string      `orm:"tags"        json:"tags"`        // 标签
	Referer    string      `orm:"referer"     json:"referer"`     // 内容来源
	Status     int         `orm:"status"      json:"status"`      // 状态\n0: 禁用\n1: 正常
	CreateTime *gtime.Time `orm:"create_time" json:"create_time"` // 创建时间
	UpdateTime *gtime.Time `orm:"update_time" json:"update_time"` // 修改时间
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}
